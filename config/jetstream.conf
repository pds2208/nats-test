debug: true
trace: false

# Each server can connect to clients on the internal port 4222
# (mapped to external ports in our docker-compose)
port: 4222

# Persistent JetStream data store
jetstream = {
  # Each server persists messages within the docker container
  # at /data/nats-server (mounted as ./persistent-data/server-nâ€¦
  # in our docker-compose)
  store_dir: "/data/nats-server/"
}

# Cluster formation
cluster = {
  name: "JSC"
  listen: "0.0.0.0:4245"

  # Servers can connect to one another at
  # the following routes
  routes = [
    "nats://n1:4245"
    "nats://n2:4245"
    "nats://n3:4245"
  ]

  # Servers authenticate with one another using TLS certificates.
  #tls = {
  #  cert_file: "/config/server-cert.pem"
  #  key_file: "/config/server-key.pem"
  #  ca_file: "/config/rootCA.pem"

    # Server will attempt to verify that the certificate
    # presented by another server is signed by the CA specified above
    # It will also map certificate attributes to the other server's
    # identity, attempting to extract email, DNS names or subject.
    # More info: https://docs.nats.io/nats-server/configuration/securing_nats/auth_intro/tls_mutual_auth
   # verify_and_map: true
  #}

   #authorization = {
    # If server can map certificate attributes to the following user,
    # it is authorized to join the cluster.
    #user: "server@localhost"
  #}
}

# Client authentication, using TLS certificates.
#tls = {
# cert_file: "/config/client-cert.pem"
# key_file: "/config/client-key.pem"
# ca_file: "/config/rootCA.pem"

 # Server will attempt to verify that the certificate
 # presented by the client is signed by the CA specified above.
 # It will also map certificate attributes to the client's
 # identity, attempting to extract email, DNS names or subject.
 # More info: https://docs.nats.io/nats-server/configuration/securing_nats/auth_intro/tls_mutual_auth
# verify_and_map: true
#}

# Client authorization
#authorization = {
#  users = [
#    {
      # If server can map certificate attributes to the following user,
      # the client is authorized to create a stream & a consumer
      # and publish/subscribe/acknowledge a message on the
      # ORDERS.received subject.
#      user: "client@localhost"
#      permissions = {
#        publish = [
          # More info on permissions: https://github.com/nats-io/jetstream#admin-api
#          "$JS.API.INFO"
#          "$JS.API.STREAM.CREATE.ORDERS"
#          "$JS.API.CONSUMER.CREATE.ORDERS"
#          "$JS.API.STREAM.NAMES"
#          "$JS.API.STREAM.INFO.ORDERS"
#          "ORDERS.received"
#          "$JS.ACK.ORDERS"
#        ]
#      }
#    }
#  ]
#}